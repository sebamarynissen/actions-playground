// # create-prs.js
import fs from 'node:fs';
import path from 'node:path';
import ora from 'ora';
import simpleGit from 'simple-git';
import { Octokit } from '@octokit/rest';
const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
const baseDir = process.cwd();
const git = simpleGit({ baseDir });

const results = [
	{
		files: ['src/yaml/test.yaml'],
		branch: 'package/smf-16/one',
		message: 'Add smf-16:one',
	},
];

async function handleResult(result) {

	// We will first list all PR's
	const owner = process.env.GITHUB_OWNER;
	const repo = process.env.GITHUB_REPO;
	let spinner = ora('Getting open pull requests').start();
	const { data: prs } = await octokit.pulls.list({
		owner,
		repo,
		state: 'open',
		head: `${process.env.GH_OWNER}/${result.branch}`,
	});
	spinner.succeed();

	// If a PR already exists for this branch, it's probably a fix deployed by 
	// the creator of the package. This means we have to fetch the branch from 
	// the server.
	if (prs.length > 0) {
		await git.pull('origin', result.branch);
		await git.checkout(result.branch);
	} else {
		await git.checkoutLocalBranch(result.branch);
	}

	// Add all the modified files & then commit.
	for (let file of result.files) {
		await git.add(file);
	}
	await git.commit(result.message);
	await git.push('origin', result.branch);

	// If no PR existeed yet, then we have to push the branch. Otherwise it will 
	// be handled for us.
	if (prs.length === 0) {
		let spinner = ora('Creating new PR on GitHub').start();
		const { data: pr } = await octokit.pulls.create({
			owner,
			repo,
			base: 'main',
			title: result.message,
			head: result.branch,
			body: 'This PR is generated by Octokit',
		});
		spinner.succeed();

		spinner = ora('Adding labels').start();
		octokit.issues.addLabels({
			owner,
			repo,
			issue_number: pr.id,
			labels: ['package'],
		});
		spinner.succeed();

	}

}

// Generate some fake file data first.
for (let result of results) {
	for (let file of result.files) {
		await fs.promises.mkdir(path.dirname(file), { recursive: true });
		await fs.promises.writeFile(file, String(Math.random()));
	}
}

for (let result of results) {
	await handleResult(result);
}

// try {
// 	await git.deleteLocalBranch('package/smf-16/one', true);
// } catch (e) {
// 	console.log(e);
// }
// await git.checkout('main');

// for (let result of results) {
// 	let spinner = ora(`Creating new branch ${result.branch}`).start();
// 	await git.checkoutLocalBranch(result.branch);
// 	spinner.succeed();
// 	spinner = ora('Adding files...').start();
// 	for (let file of result.files) {
// 		await git.add(file);
// 		spinner.text = `${file} added`;
// 	}
// 	spinner.succeed(`Added ${result.files}`);
// 	spinner = ora(`Creating commit`).start();
// 	await git.commit(result.message);
// 	spinner.succeed();
// 	await git.push('origin', result.branch);

// 	spinner = ora('Creating PR on GitHub').start();
// 	const { data: pr } = await octokit.pulls.create({
// 		owner: 'sebamarynissen',
// 		repo: 'actions-playground',
// 		base: 'main',
// 		title: result.message,
// 		head: result.branch,
// 		body: 'This PR is generated by Octokit',
// 	});
// 	spinner.succeed();

// }



// let spinner = ora('Adding labels').start();
// await octokit.issues.addLabels({
// 	owner: 'sebamarynissen',
// 	repo: 'actions-playground',
// 	issue_number: 14,
// 	labels: [
// 		'package',
// 	],
// });
// spinner.succeed();
